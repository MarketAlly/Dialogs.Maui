<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net9.0;net9.0-android;net9.0-ios;net9.0-maccatalyst</TargetFrameworks>
    <TargetFrameworks Condition="$([MSBuild]::IsOSPlatform('windows'))">$(TargetFrameworks);net9.0-windows10.0.19041.0</TargetFrameworks>
    <!-- Uncomment to also build the tizen app. You will need to install tizen by following this: https://github.com/Samsung/Tizen.NET -->
    <!-- <TargetFrameworks>$(TargetFrameworks);net9.0-tizen</TargetFrameworks> -->

    <!-- Note for MacCatalyst:
    The default runtime is maccatalyst-x64, except in Release config, in which case the default is maccatalyst-x64;maccatalyst-arm64.
    When specifying both architectures, use the plural <RuntimeIdentifiers> instead of the singular <RuntimeIdentifier>.
    The Mac App Store will NOT accept apps with ONLY maccatalyst-arm64 indicated;
    either BOTH runtimes must be indicated or ONLY macatalyst-x64. -->
    <!-- For example: <RuntimeIdentifiers>maccatalyst-x64;maccatalyst-arm64</RuntimeIdentifiers> -->

    <UseMaui>true</UseMaui>
    <SingleProject>true</SingleProject>
    <ImplicitUsings>enable</ImplicitUsings>
    <Nullable>enable</Nullable>
		<PackageOutputPath>C:\Users\logik\Dropbox\Nugets</PackageOutputPath>

    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'ios'">11.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'maccatalyst'">13.1</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'android'">21.0</SupportedOSPlatformVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</SupportedOSPlatformVersion>
    <TargetPlatformMinVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'windows'">10.0.17763.0</TargetPlatformMinVersion>
    <SupportedOSPlatformVersion Condition="$([MSBuild]::GetTargetPlatformIdentifier('$(TargetFramework)')) == 'tizen'">6.5</SupportedOSPlatformVersion>

    <!-- Library specific properties -->
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>MarketAlly.Dialogs.Maui</PackageId>
    <Title>MarketAlly Dialogs for .NET MAUI</Title>
    <Version>1.0.2</Version>
    <Authors>David H Friedel Jr</Authors>
    <Company>MarketAlly</Company>
    <Description>A comprehensive, production-ready dialog library for .NET MAUI applications featuring 7 dialog types (Alert, Confirm, Prompt, Editor, Loading, ActionList, ColorPicker), built-in theming with dark/light mode support, internationalization (English, Spanish, French, German), custom icons, and extensive customization options. Supports iOS, Android, Windows, and macOS.</Description>
    <Copyright>Copyright © MarketAlly 2025</Copyright>
		<PackageIcon>icon.png</PackageIcon>
    <PackageTags>maui;dialog;popup;modal;alert;confirm;prompt;loading;actionlist;colorpicker;theme;dark-mode;localization;i18n;mopups;ios;android;windows;macos;ui;controls</PackageTags>
    <PackageProjectUrl>https://github.com/MarketAlly/MarketAlly.Dialogs.Maui</PackageProjectUrl>
    <RepositoryUrl>https://github.com/MarketAlly/MarketAlly.Dialogs.Maui</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageReadmeFile>README.md</PackageReadmeFile>
    <PackageReleaseNotes>
Initial release v1.0.0:
• 7 dialog types: Alert, Confirm, Prompt, Editor, Loading, ActionList, ColorPicker
• Built-in dark/light theme support with automatic detection
• Internationalization support (English, Spanish, French, German)
• Custom icon support with platform-specific optimizations
• Password visibility toggle for prompt dialogs
• Customizable description padding
• Cross-platform support (iOS, Android, Windows, macOS)
• Full .NET 9 compatibility
    </PackageReleaseNotes>
    <RequireLicenseAcceptance>false</RequireLicenseAcceptance>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.Maui.Controls" Version="9.0.110" />
    <PackageReference Include="Microsoft.Maui.Controls.Compatibility" Version="9.0.110" />
    <PackageReference Include="Mopups" Version="1.3.4" />
  </ItemGroup>

  <ItemGroup>
    <None Include="..\README.md" Pack="true" PackagePath="\" />
    <!-- Note: Add icon.png file to the project root for NuGet package icon -->
    <!-- <None Include="icon.png" Pack="true" PackagePath="\" /> -->
  </ItemGroup>

  <!-- Include images for both development and NuGet distribution -->
  <ItemGroup>
		<None Include="icon.png">
			<Pack>true</Pack>
			<PackagePath>\</PackagePath>
			<CopyToOutputDirectory>PreserveNewest</CopyToOutputDirectory>
			<Visible>true</Visible>
		</None>
    <!-- For development: MauiImage processes PNGs -->
    <MauiImage Include="Resources\Images\*.png" BaseSize="48,48" />

    <!-- For NuGet: Embed PNGs as resources that will work from the package -->
    <EmbeddedResource Include="Resources\Images\*.png">
      <LogicalName>%(Filename)%(Extension)</LogicalName>
    </EmbeddedResource>
  </ItemGroup>
  <ItemGroup>
    <Folder Include="Themes\" />
  </ItemGroup>

</Project>